import os
import binary

package App
  public
    enum byte with Flags MyEnum: A, B, C, D=5, E, F=7
    const bool DEBUG=true

  delegate EventHandler()

  class abstract EmptyClass

  class sealed with SomeAttr,OtherAttr MyClass (StreamImpl,IKickAss)
    bool init, nl
    def Init(): print "I'm ready!"; init=true

    public
      def A(): Init()
      def A(string str)
        Init()
        Write(str)

      def Write(string str)
        if nl: print str
        else: print str,

      prop bool NewLine
        get: return nl
        set: nl=value

    protected
      event EventHandler Wrote
      event EventHandler with LayoutAttr(Pack:1, Type:Binary) NewLineChanged
        add: print "added"
        rem: print "removed"

  int default_samplerate = int(22050.0)
  int max_samplerate     = 44100

  var fmts = {
    "M.K.": 4, "M!K!": 4, "FLT4": 4, "FLT8": 8,  "4CHN": 4, "6CHN": 6,
    "8CHN": 8, "CD81": 8, "OKTA": 8, "16CN": 16, "32CN": 32
  }

  var test = new MyClass("foo")

  def ripdir(dir)
    "extract samples from every module in the given directory"
    for fn in os.listdir(dir)
      if fn[-4:].lower() == ".mod": rip(fn)

  def rip(fn)
    "extract samples from fn, writing fn.NN.wav to current directory"
    fi = open(fn, "rb")
    print fi.read(20) # name

    notes    = [] # note frequency data
    slengths = [] # sample lengths

    for i in range(0, 31)
      slengths.append(binary.unpack(">22sHBBHH", fi.read(30))[1]*2)
      notes.append({})

    fi.read(2) # skip crap

    npats  = max(binary.unpack("128B", fi.read(128)))+1 # number of patterns
    nchans = fmts[fi.read(4)] # number of channels

    # collect frequency frequency data
    for i in range(0, npats*nchans*64)
      # fucking file formats designed by 13 year olds!
      nd = binary.unpack(">4B", fi.read(4))
      inst = (nd[0] & 128+64+32+16) | nd[2]>>4
      period = nd[1] | (nd[0] & 1+2+4+8)

      if(inst and period)
        note = 7159090.5 / (2*period)
        notes[inst-1][note] = notes[inst-1].setdefault(note, 1) + 1

    # extract samples
    for i in range(0, 31)
      if slengths[i]
        fo = open("%s.%02d.wav"%(fn,i), "wb")
        wavwrite(fo, maxvalue(notes[i]), fi.read(slengths[i]))
        fo.close()

    fi.close()

  def maxvalue(data)
    "return the most-used playback frequency in the data set passed"
    max = 0
    mv = default_samplerate
    for i in data.keys()
      if data[i] > max
        (max,mv) = (data[i],i)
        if mv > max_samplerate: return max_samplerate

    return mv

  # fucking file formats designed by microsoft committee!
  def wavwrite(fo, sr, data)
    "write wave data to fo at sample rate sr"
    dl = len(data)

    # header
    fo.write(binary.pack("<4sl4s", "RIFF", 36+dl, "WAVE"))
    fo.write(binary.pack("<4slhhllhh", "fmt ", 16, 1, 1, sr, sr, 1, 8))
    fo.write(binary.pack("<4sl", "data", dl))

    # convert signed to unsigned bytes; write
    fo.write(binary.pack("%dB"%dl,
                        *map(lambda(x): x+128, binary.unpack("%db"%dl, data))))

  def void Main()
    ripdir(".")